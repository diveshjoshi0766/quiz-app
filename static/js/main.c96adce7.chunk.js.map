{"version":3,"sources":["constants/actionTypes.js","components/Review.js","components/Questions.js","components/Result.js","components/Quiz.js","App.js","registerServiceWorker.js","middleware.js","reducers/quiz.js","reducer.js","store.js","index.js"],"names":["ActionTypes","Review","isAnswered","q","options","some","x","selected","className","this","props","quiz","name","questions","map","index","id","onClick","move","Component","Questions","question","option","JSON","parse","stringify","find","questionTypeId","forEach","onAnswer","slice","pager","size","count","htmlFor","checked","type","onChange","config","allowBack","connect","state","mode","dispatch","payload","Result","isCorrect","every","isAnswer","disabled","Quiz","e","target","parseInt","onPagerUpdate","setMode","onSubmit","renderMode","App","quizes","quizId","setState","value","load","url","fetch","then","res","json","o","Object","assign","length","onQuizLoad","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","promiseMiddleware","store","next","action","initialQuiz","combineReducers","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c96adce7.chunk.js","sourcesContent":["\nexport const ActionTypes = {\n    QuizLoad: 'QuizLoad',\n    QuizAnswer: 'QuizAnswer',\n    QuizSubmit: 'QuizSubmit',\n    PagerUpdate: 'PagerUpdate'\n}","import React, { Component } from 'react';\n\nclass Review extends Component {\n    isAnswered = (q) => {\n        return q.options.some(x => x.selected) ? 'Answered' : 'Not Answered';\n    }\n\n    render() {\n        return <div>\n            <h2 className=\"text-center font-weight-normal\">Review Quiz: {this.props.quiz.name}</h2>\n            <hr />\n            <div className=\"row text-center\">\n                {this.props.quiz.questions.map((q, index) =>\n                    <div key={q.id} className=\"col-4 cursor-pointer\">\n                        <div id={index} onClick={this.props.move} className={`p-3 mb-2 ${this.isAnswered(q) === 'Answered' ? 'bg-info' : 'bg-warning'}`}>{index + 1}. {this.isAnswered(q)}</div>\n                    </div>\n                )}\n            </div>\n        </div >\n    }\n}\n\nexport default Review;","import React, { Component } from 'react';\nimport { ActionTypes } from '../constants/actionTypes';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({ ...state.quiz, ...state.mode, ...state.pager });\n\nconst mapDispatchToProps = dispatch => ({\n    onAnswer: payload => dispatch({ type: ActionTypes.QuizAnswer, payload })\n});\n\nclass Questions extends Component {\n\n    onAnswer(question, option) {\n        let quiz = JSON.parse(JSON.stringify(this.props.quiz));\n        let q = quiz.questions.find(x => x.id === question.id);\n        if (q.questionTypeId === 1) {\n            q.options.forEach((x) => { x.selected = false; });\n        }\n        q.options.find(x => x.id === option.id).selected = true;\n        this.props.onAnswer(quiz);\n    }\n\n    render() {\n        let questions = (this.props.quiz.questions) ?\n            this.props.quiz.questions.slice(this.props.pager.index, this.props.pager.index + this.props.pager.size) : [];\n        return (\n            <div id=\"quiz\">\n                <h2 className=\"text-center font-weight-normal\">{this.props.quiz.name}</h2>\n                <hr />\n                {questions.map(q =>\n                    <div key={q.id}>\n                        <div className=\"badge badge-info\">Question {this.props.pager.index + 1} of {this.props.pager.count}.</div>\n                        <h3 className=\"font-weight-normal\">{this.props.pager.index + 1}. <span>{q.name}</span></h3>\n                        <div className=\"row text-left options\">\n                            {\n                                q.options.map(option =>\n                                    <div key={option.id} className=\"col-6\">\n                                        <div className=\"option\">\n                                            <label className=\"font-weight-normal\" htmlFor={option.id}>\n                                                <input id={option.id} checked={option.selected} type=\"checkbox\" onChange={() => this.onAnswer(q, option)} />\n                                                {option.name}\n                                            </label>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        </div>\n                    </div>\n                )}\n                <hr />\n                <div className=\"text-center\">\n                    {this.props.quiz.config.allowBack && <button id=\"first\" className=\"btn btn-default\" onClick={this.props.move}>First</button>}\n                    {this.props.quiz.config.allowBack && <button id=\"prev\" className=\"btn btn-default\" onClick={this.props.move}>Prev</button>}\n                    <button id=\"next\" className=\"btn btn-primary\" onClick={this.props.move}>Next</button>\n                    <button id=\"last\" className=\"btn btn-default\" onClick={this.props.move}>Last</button>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import React from 'react';\n\nfunction Result(props) {\n    let questions = props.questions;\n    questions.forEach(q => { q.isCorrect = q.options.every(x => x.selected === x.isAnswer); })\n\n    return (\n        <div className=\"result\">\n            <h2 className=\"text-center font-weight-normal\">Quiz Result</h2>\n            {questions.map((q, index) =>\n                <div key={q.id} className={`mb-2 ${q.isCorrect ? 'bg-success' : 'bg-danger'}`}>\n                    <div className=\"result-question\">\n                        <h5>{index + 1}. {q.name}</h5>\n                        <div className=\"row\">\n                            {\n                                q.options.map(option =>\n                                    <div key={option.id} className=\"col-6\">\n                                        <input id={option.id} type=\"checkbox\" disabled=\"disabled\" checked={option.selected} /> {option.name}\n                                    </div>\n                                )\n                            }\n                        </div>\n                        <div className={`m-1 p-1 text-bold ${q.isCorrect ? 'text-success' : 'text-danger'}`}>Your answer is {q.isCorrect ? 'Correct' : 'Wrong'}.</div>\n                    </div>\n                </div>\n            )}\n            <h4 className=\"alert alert-info text-center\">You may close this window now.</h4>\n        </div>\n    )\n}\n\nexport default Result;","import React, { Component } from 'react';\nimport { ActionTypes } from '../constants/actionTypes';\nimport Review from './Review';\nimport Questions from './Questions';\nimport Result from './Result';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => { return { ...state.quiz, ...state.mode, ...state.pager } };\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: payload => dispatch({ type: ActionTypes.QuizSubmit, payload }),\n    onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass Quiz extends Component {\n    move = (e) => {\n        let id = e.target.id;\n        let index = 0;\n        if (id === 'first')\n            index = 0;\n        else if (id === 'prev')\n            index = this.props.pager.index - 1;\n        else if (id === 'next')\n            index = this.props.pager.index + 1;\n        else if (id === 'last')\n            index = this.props.pager.count - 1;\n        else\n            index = parseInt(e.target.id, 10);\n\n        if (index >= 0 && index < this.props.pager.count) {\n            let pager = {\n                index: index,\n                size: 1,\n                count: this.props.pager.count\n            };\n            this.props.onPagerUpdate(pager);\n        }\n    }\n\n    setMode = (e) => this.props.onSubmit(e.target.id);\n\n    renderMode() {\n        if (this.props.mode === 'quiz') {\n            return (<Questions move={this.move} />)\n        } else if (this.props.mode === 'review') {\n            return (<Review quiz={this.props.quiz} move={this.move} />)\n        } else {\n            return (<Result questions={this.props.quiz.questions || []} />)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderMode()}\n                {(this.props.mode !== 'submit') &&\n                    <div>\n                        <hr />\n                        <button id=\"quiz\" className=\"btn btn-info\" onClick={this.setMode}>Quiz</button>\n                        <button id=\"review\" className=\"btn btn-info\" onClick={this.setMode}>Review</button>\n                        <button id=\"submit\" className=\"btn btn-primary\" onClick={this.setMode}>Submit Quiz</button >\n                    </div >}\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React, { Component } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport { connect } from 'react-redux';\nimport { ActionTypes } from './constants/actionTypes';\n\nconst mapStateToProps = state => { return { ...state.quiz } };\n\nconst mapDispatchToProps = dispatch => ({\n  onQuizLoad: payload => dispatch({ type: ActionTypes.QuizLoad, payload }),\n  onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass App extends Component {\n  state = {\n    quizes: [\n      { id: 'data/javascript.json', name: 'Javascript' },\n      { id: 'data/aspnet.json', name: 'Asp.Net' },\n      { id: 'data/csharp.json', name: 'C Sharp' },\n      { id: 'data/designPatterns.json', name: 'Design Patterns' }\n    ],\n    quizId: 'data/javascript.json'\n  };\n\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1\n  }\n\n  componentDidMount() {\n    this.load(this.state.quizId);\n  }\n\n  load(quizId) {\n    let url = quizId || this.props.quizId;\n    fetch(`../${url}`).then(res => res.json()).then(res => {\n      let quiz = res;\n      quiz.questions.forEach(q => {\n        q.options.forEach(o => o.selected = false);\n      });\n      quiz.config = Object.assign(this.props.quiz.config || {}, quiz.config);\n      this.pager.count = quiz.questions.length / this.pager.size;\n      this.props.onQuizLoad(quiz);\n      this.props.onPagerUpdate(this.pager);\n    });\n  }\n\n  onChange = (e) => {\n    this.setState({ quizId: e.target.value });\n    this.load(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"p-2\">\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <h3>Quiz Application</h3>\n            </div>\n            <div className=\"col-6 text-right\">\n              <label className=\"mr-1\">Select Quiz:</label>\n              <select onChange={this.onChange}>\n                {this.state.quizes.map(q => <option key={q.id} value={q.id}>{q.name}</option>)}\n              </select>\n            </div>\n          </div>\n        </header>\n        <Quiz quiz={this.state.quiz} quizId={this.state.quizId} mode={this.state.mode} />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { } from './constants/actionTypes';\n\nconst promiseMiddleware = store => next => action => {\n    // Do Nothing for now.//\n    next(action);\n};\n\nexport { promiseMiddleware }","import {\n    ActionTypes\n} from '../constants/actionTypes';\n\nlet initialQuiz = {\n    quiz: {\n        config: {\n            'allowBack': true,\n            'allowReview': true,\n            'autoMove': false,  // if true, it will move to next question automatically when answered.\n            'duration': 0,  // indicates the time in which quiz needs to be completed. 0 means unlimited.\n            'pageSize': 1,\n            'requiredAll': false,  // indicates if you must answer all the questions before submitting.\n            'richText': false,\n            'shuffleQuestions': false,\n            'shuffleOptions': false,\n            'showClock': false,\n            'showPager': true,\n            'theme': 'none'\n        },\n        questions: []\n    },\n    mode: 'quiz',\n    pager: {\n        index: 0,\n        size: 1,\n        count: 1\n    }\n}\n\nexport default (state = { ...initialQuiz }, action) => {\n    switch (action.type) {\n        case ActionTypes.PagerUpdate:\n            return {\n                ...state, pager: action.payload, mode: 'quiz'\n            }\n        case ActionTypes.QuizLoad:\n            return {\n                ...state, quiz: action.payload\n            }\n        case ActionTypes.QuizSubmit:\n            console.log('quiz.js Submitted.');\n            return {\n                ...state, mode: action.payload\n            }\n        case ActionTypes.QuizAnswer:\n            console.log('quiz.js reducer Quiz Answer called.');\n            return {\n                ...state, quiz: action.payload\n            }\n        default:\n            return state;\n    }\n};\n","import quiz from './reducers/quiz';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  quiz\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { promiseMiddleware } from './middleware';\nimport reducer from './reducer';\n\nconst getMiddleware = () => {\n    if (process.env.NODE_ENV === 'production') {\n        return applyMiddleware(promiseMiddleware);\n    } else {\n        return applyMiddleware(promiseMiddleware)\n    }\n};\n\nexport const store = createStore(reducer, composeWithDevTools(getMiddleware()));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}